name: tests

on:
  push:
  #  pull_request: # Run on all pull requests
  #  push: # Run only on pushes to master
  #    branches:
  #      - master
  schedule: # Run monthly
    - cron: "0 0 1 * *"

jobs:
#  test:
#    name: ${{ matrix.os }} (${{ matrix.python-version }})
#    runs-on: ${{ matrix.os }}
#
#    strategy:
#      fail-fast: false
#      matrix:
#        python-version: [ "pypy3", "3.6", "3.7", "3.8", "3.9" ]
#        os: [ ubuntu-latest, macos-latest, windows-latest ]
#        exclude:
#          # pypy3 randomly fails on Windows builds
#          - os: windows-latest
#            python-version: "pypy3"
#
#    steps:
#      # Check out latest code
#      - uses: actions/checkout@v2
#
#      # Configure pip cache
#      - name: Cache pip (Linux)
#        uses: actions/cache@v2
#        if: startsWith(runner.os, 'Linux')
#        with:
#          path: ~/.cache/pip
#          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
#          restore-keys: |
#            ${{ runner.os }}-pip-
#
#      - name: Cache pip (macOS)
#        uses: actions/cache@v2
#        if: startsWith(runner.os, 'macOS')
#        with:
#          path: ~/Library/Caches/pip
#          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
#          restore-keys: |
#            ${{ runner.os }}-pip-
#
#      - name: Cache pip (Windows)
#        uses: actions/cache@v2
#        if: startsWith(runner.os, 'Windows')
#        with:
#          path: ~\AppData\Local\pip\Cache
#          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
#          restore-keys: |
#            ${{ runner.os }}-pip-
#
#      # Set up Python
#      - name: Set up Python ${{ matrix.python-version }}
#        uses: actions/setup-python@v2
#        with:
#          python-version: ${{ matrix.python-version }}
#
#      # Install dependencies
#      - name: Install dependencies
#        run: |
#          pip install -U pip setuptools wheel
#          pip install -U tox tox-gh-actions
#
#      # Run tests
#      - name: Test with tox
#        run: tox
#
#      # Upload coverage report
#      - name: Upload coverage to Codecov
#        uses: codecov/codecov-action@v1
#        with:
#          file: coverage.xml
#
#  lint:
#    runs-on: ubuntu-latest
#
#    steps:
#      # Check out latest code
#      - uses: actions/checkout@v2
#
#      # Set up Python
#      - name: Set up Python 3.8
#        uses: actions/setup-python@v2
#        with:
#          python-version: "3.8"
#
#      # Configure pip cache
#      - name: Cache pip
#        uses: actions/cache@v2
#        with:
#          path: ~/.cache/pip
#          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
#          restore-keys: |
#            ${{ runner.os }}-pip-
#
#      # Configure pre-commit cache
#      - name: Cache pre-commit
#        uses: actions/cache@v2
#        with:
#          path: ~/.cache/pre-commit
#          key: ${{ runner.os }}-pre-commit-${{ hashFiles('**/.pre-commit-config.yaml') }}
#          restore-keys: |
#            ${{ runner.os }}-pre-commit-
#
#      # Install dependencies
#      - name: Install dependencies
#        run: |
#          pip install -U pip setuptools wheel
#          pip install -U tox
#
#      # Lint code
#      - name: Lint code
#        run: tox -e lint
#
#      # Lint docs
#      - name: Lint docs
#        run: tox -e docs

  wsl_test:
    strategy:
      matrix:
        python:
          - 3.6.8
          - 3.7.9
          - 3.8.6
          - 3.9.1
    name: WSL
    runs-on: windows-latest
    defaults:
      run:
        shell: wsl-bash {0}

    steps:
      # Setup WSL
      - name: Install WSL
        uses: Vampire/setup-wsl@v1
        with:
          additional-packages:
            git
            python3
            python3-pip
            ca-certificates
            wget
            curl
            llvm
            make
            build-essential
            xz-utils
            libexpat1-dev
            libssl-dev
            zlib1g-dev
            libncurses5-dev
            libbz2-dev
            liblzma-dev
            libsqlite3-dev
            libffi-dev
            tcl-dev
            libgdbm-dev
            libreadline-dev
            libxmlsec1-dev
            tk-dev
            libncurses5-dev
            libxml2-dev

      # Check out latest code
      - name: Clone arrow
        run: git clone https://github.com/arrow-py/arrow.git

      # Install pyenv
      - name: Setup pyenv
        run: git clone https://github.com/pyenv/pyenv.git ~/.pyenv
      # Install python version via pyenv
      - name: pyenv install python version
        run: PYENV_ROOT="~/.pyenv" ~/.pyenv/bin/pyenv install ${{ matrix.python }}

      # Install dependencies and run tests
      - name: Install dependencies and run tests
        run: |
          eval "$(~/.pyenv/bin/pyenv init -)" &&
          ~/.pyenv/bin/pyenv local ${{ matrix.python }} &&
          pip3 install -U pip setuptools wheel tox &&
          cd arrow &&
          tox